# -*- org-src-fontify-natively: t org-src-tab-acts-natively: t -*-
#+EXCLUDE_TAGS: no_export
#+LaTeX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \usepackage{etoolbox}
#+LaTeX_HEADER: \usepackage{xinttools}
#+LaTeX_HEADER: \usemintedstyle{emacs}
#+LaTeX_HEADER: \newcommand{\subjectname}{TC2017.1 Electricidad y Magnetismo}
#+LaTeX_HEADER: \newcommand{\documenttitle}{Proyecto Final}
#+LaTeX_HEADER: \newcommand{\profesorname}{Profesor Edgar René}
#+LaTeX_HEADER: \newcommand{\authornames}{%
#+LaTeX_HEADER:   Pablo Muñoz Haro A01222422,%
#+LaTeX_HEADER:   Andrés Barro
#+LaTeX_HEADER: }
#+LaTeX_HEADER: \input{/Users/home/pablo/latex/templates/org_tec_titlepage}
#+LATEX: \clearpage

* Manifest Constants
#+BEGIN_SRC javascript :noweb-ref manifest-constants
  var WINDOW_WIDTH  = 970;
  var WINDOW_HEIGHT = 720;

  const PERMITIVITY     = 9 * Math.pow(10, 9);
  const ELECTRON_CHARGE = -1.602 * Math.pow(10, -19);
  const PROTON_CHARGE   = -ELECTRON_CHARGE;
  const PROTON_MASS     = 1.6727 * Math.pow(10, -27);
  const NEUTRON_MASS    = 1.6750 * Math.pow(10, -27);
  const ELECTRON_MASS   =  9.110 * Math.pow(10, -31);
#+END_SRC

* Partículas
** =class Particle=
#+BEGIN_SRC javascript :noweb-ref particle
  class Particle {
      // x, y, radius
      constructor(args) {
          _.assign(this, _.defaults(args, {
              x: WINDOW_WIDTH / 2,
              y: WINDOW_HEIGHT / 2,
              radius: 8,
              velocityX: 0,            // m/s
              velocityY: 0,            // m/s
              accelX: 0,               // m/s
              accelY: 0,               // m/s
              charge: ELECTRON_CHARGE, // C
              mass: ELECTRON_MASS      // kg
          }));

          if (this.charge > 0) {
              this.color = 'red';
          } else if (this.charge < 0) {
              this.color = 'blue';
          }
      }

      draw() {
          this.circle = new Path.Circle(new Point(this.x, this.y), this.radius);
          this.circle.fillColor = this.color;
      }

      on(event, func) {
          this.circle['on' + _.capitalize(event)] = func;
      }

      reactToElectricFieldDueTo(otherParticle) {
          const distanceX = (this.circle.position.x - otherParticle.circle.position.x); // 1 pxl = 1cm
          const distanceY = (this.circle.position.y - otherParticle.circle.position.y); // 1 pyl = 1cm
          var forceX = 0,
              forceY = 0;

          if (distanceX != 0) {
              forceX = PERMITIVITY * (Math.abs((this.charge * otherParticle.charge))
                                      / Math.pow(distanceX, 2));
          }
          if (distanceY != 0) {
              forceY = PERMITIVITY * (Math.abs((this.charge * otherParticle.charge))
                                      / Math.pow(distanceY, 2));
          }

          this.accelX = forceX / this.mass;
          this.accelY = forceY / this.mass;

          // Still need to come up with proper sign
          const sameChargeType = Math.sign(this.charge) == Math.sign(otherParticle.charge);

          if (sameChargeType) {
              // Repel each other
              if (otherParticle.circle.position.x > this.circle.position.x) {
                  this.accelX *= -1;
              }
              if (otherParticle.circle.position.y > this.circle.position.y) {
                  this.accely *= -1;
              }
          } else {
              if (otherParticle.circle.position.x < this.circle.position.x) {
                  this.accelX *= -1;
              }
              if (otherParticle.circle.position.y < this.circle.position.y) {
                  this.accely *= -1;
              }
          }
      }

      advanceTime(milliseconds) {
          const seconds = milliseconds / 1000;
          this.velocityX += this.accelX * seconds;
          this.velocityY += this.accelY * seconds;
          this.circle.translate(new Point(this.velocityX, this.velocityY));
      }

  }
#+END_SRC

* Funciones de utilería
* Simulación de Ley de Coulomb
Para las simulaciones de la ley de Coulomb se realizan las siguientes
suposiciones:

- Las partículos se encuentran inicialmente en reposo (velocidad =
  acelearación = 0)
- Cada pixel equivaldrá a 1m del mundo real.

** Interacción entre 2 cargas puntuales
#+BEGIN_SRC javascript :noweb-ref two-point-charge-system
  class TwoPointChargeSystem {
      constructor() {
          this.frameMillis = 1000 / 60;

          this.p0 = new Particle({
              x: WINDOW_WIDTH / 2 - 30,
          });
          this.p0.draw();

          this.p1 = new Particle({
              x: WINDOW_WIDTH / 2 + 30,
          });
          this.p1.draw();
      }

      start() {
          this.refreshIntervalId = setInterval(_.bind(function() {
              this.p0.reactToElectricFieldDueTo(this.p1);
              this.p1.reactToElectricFieldDueTo(this.p0);
              this.p0.advanceTime(this.frameMillis);
              this.p1.advanceTime(this.frameMillis);
          }, this), this.frameMillis);
      }

      stop() {
      }
  }
#+END_SRC

* Source Files                                                    :no_export:
#+BEGIN_SRC javascript :tangle projectv2.js :noweb yes
  paper.install(window);

  <<manifest-constants>>

  <<particle>>

  <<two-point-charge-system>>

  window.onload = function() {
      $('#canvas').width($('#canvas-container').width());

      WINDOW_WIDTH  = $('#canvas-container').width();
      WINDOW_HEIGHT = $('#canvas-container').height();

      paper.setup('canvas');

      var scenario = new TwoPointChargeSystem();
      scenario.start();
  }
#+END_SRC
