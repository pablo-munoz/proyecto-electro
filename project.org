# -*- org-src-fontify-natively: t org-src-tab-acts-natively: t -*-
#+EXCLUDE_TAGS: no_export
#+LaTeX_HEADER: \usepackage[utf8]{inputenc}
#+LaTeX_HEADER: \usepackage[spanish, es-noshorthands, es-tabla]{babel}
#+LaTeX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \usepackage{etoolbox}
#+LaTeX_HEADER: \usepackage{xinttools}
#+LaTeX_HEADER: \usepackage{graphicx}
#+LaTeX_HEADER: \usepackage{lscape}
#+LaTeX_HEADER: \usepackage{geometry}
#+LaTeX_HEADER: \usemintedstyle{emacs}
#+LaTeX_HEADER: \newcommand{\subjectname}{F1005 Electricidad y Magnetismo}
#+LaTeX_HEADER: \newcommand{\documenttitle}{Proyecto Final: Simulador de partículas cargadas}
#+LaTeX_HEADER: \newcommand{\profesorname}{Profesor Edgar René López Mena}
#+LaTeX_HEADER: \newcommand{\authornames}{%
#+LaTeX_HEADER:   Pablo Muñoz Haro A01222422,%
#+LaTeX_HEADER:   Andrés Barro Encinas A00226225
#+LaTeX_HEADER: }
#+LaTeX_HEADER: \input{/Users/home/pablo/latex/templates/org_tec_titlepage}
#+LATEX: \clearpage

* Introducción
Este documento contiene el análisis, diseño y documentación de el
proyecto "Simulador de partículas cargadas" desarrollado para la clase
de Electricidad y Magnetismo impartida por el profesor Edgar René en
el Tecnológico de Monterrey Campus Guadalajara para el semestre de
Ago-Dic 2016.

El proyecto consiste de una aplicación que puede ser visistada y
utilizada en un navegador web moderno. La aplicación provee al usuario
con ciertos sistemas de partículas predefinidos, los cuáles pueden ser
modificados en cierta medida y que al momento de presionar "Start" se
comienza a generar una animación que simula la interacción de
partículas cargadas.

* Requerimientos
- El sistema debe ser accesable a través de un navegador de internet.
- El sistema debe contener sistemas precargados de partículas que sólo
  requieran de pequeñas customizaciones.
- El sistema debe de incorporar el concepto de "velocidad del tiempo"
  que quiere decir que el usuario pueda configurar cuanto representa
  un segundo del mundo real en segundos de la simulación.
- El sistema debe permitir que el usuario seleccione la métrica de
  "pixeles por metro" de manera que pueda cambiar la escala de lo que
  es capaz de simular y visualizar.
- Las simulaciones deben correr de manera eficiente, sin
  interrupciones ni demoras.
  
* Tecnologías utilizadas
Como cualquier otra página de internet, el proyecto hace uso
significativo de los lenguajes de /HTML/ y /CSS/ (para la
presentación) y /JavaScript/ (para la lógica). En cuanto a este último
también se utilizan las librerías de /PaperJS/ para realizar dibujos
en el elemento canvas de HTML, /underscore/ para poder aplicar el
paradigma funcional, /Vue/ para sincronizar el input del usuario con
los valores de las instancias y /bootstrap/ para la interactividad de
la interfaz de usuario.

* Control de versiones
El sistema de control de versiones Git será utilizado mediante el
portal Github. El repositorio con la rama maestra del código puede ser
encontrado en la liga https://github.com/pablo-munoz/proyecto-electro.

* Identificación nde entidades
El sistema contará con entidades que representarán a las
partículas. Cada instancia de estas entidades mantendrá la información
necesaria sobre su estado así como las operaciones que permitirán
dibujarlas, trasladarlas y modificarlas.

A su vez, el sistema contendrá la entidad de "sistemas de carga", los
cuáles estarán compuestos de dos o más instancias de partículas y
estarán encargadas de orquestrar la interacción entre estas.


#+BEGIN_LaTeX
\newgeometry{a4paper,left=1in,right=1in,top=1in,bottom=1in}
\begin{landscape}
  \section{Diagrama de clases (UML)}
  \begin{figure}[H]
    \centering
    \includegraphics[width=.9\linewidth]{classes-uml.png}
    \caption{Calendario de trabajo}
    \label{fig:calendar}
  \end{figure}
\end{landscape}
\restoregeometry % Restore the global document page margins
#+END_LaTeX

* Página web
El programa puede ser accesado a través de la liga:

https://pablo-munoz.github.io/proyecto-electro/index.html

* Código Fuente
** =HTML=
#+BEGIN_SRC html
  <html>
      <head>
          <script
              src="https://code.jquery.com/jquery-3.1.1.min.js"
              integrity="sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8="
              crossorigin="anonymous"></script>
          <!-- Latest compiled and minified CSS -->
          <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"
                integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
          <!-- Latest compiled and minified JavaScript -->
          <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"
                  integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
          <script src="https://cdn.jsdelivr.net/lodash/4.16.3/lodash.min.js"></script>
          <script src="https://cdnjs.cloudflare.com/ajax/libs/paper.js/0.10.2/paper-full.js" type="text/javascript"></script>
          <script src="https://unpkg.com/vue/dist/vue.js"></script>
          <script src="projectv2.js" type="text/javascript"></script>
          <style type="text/css">
           body {
               background: url('grey.png') repeat;
           }

           canvas {
               border: 1px solid #ccc;
               background-color: white;
           }

           .particle-controls {
               background-color: #fff;
           }

           .unselectable {
               -webkit-user-select: none; /* Chrome/Safari */        
               -moz-user-select: none; /* Firefox */
               -ms-user-select: none; /* IE10+ */
               /* Rules below not implemented in browsers yet */
               -o-user-select: none;
               user-select: none;
               cursor: pointer;
           }
          </style>
      </head>
      <body>
          <div class="container" style="margin-top: 50">
              <div class="col-md-8" id="canvas-container">
                  <canvas id="canvas" width="970" height="920"></canvas>
              </div>
              <div id="app" class="controls">
                  <div class="col-md-4">
                      <div class="form-group">
                          <select id="charge-system-selector" class="form-control" v-on:change="changeChargeSystem()">
                              <option value="twoChargeSystem">Two charge system</option>
                              <option value="threeChargeSystem">Three charge system</option>
                              <option value="electricDipole">Two Static Charges</option>
                          </select>
                      </div>
                      <div class="form-group">
                          <div class="input-group">
                              <input class="form-control ppm" type="text" type="number" v-bind:value="pixelsPerMeter" v-on:change="updatePixelsPerMeter()" type="number"/>
                              <span class="input-group-addon">piexels per meter.</span>
                          </div>
                      </div>
                      <div class="form-group">
                          <div class="input-group">
                              <span class="input-group-addon">1 real second =</span>
                              <input class="form-control" type="text" v-model="simulation.frameMillis" type="number" v-on:change/>
                              <span class="input-group-addon">simul seconds.</span>
                          </div>
                      </div>
                      <button id="start-stop-btn" class="btn btn-primary" onClick="simulation.toggleStatus();">Start</button>
                      <button id="reset-btn" class="btn btn-danger" onClick="simulation.reset();">Reset</button>

                      <div class="particle-controls" v-for="(particle, index) in simulation.particles">
                          <particle-controls
                              :particle="particle"
                              :index="index"/>
                      </div>

                  </div>
              </div>
          </div>
      </body>
  </html>
#+END_SRC

** =Manifest constants=
#+BEGIN_SRC javascript
  paper.install(window);

  var WINDOW_WIDTH  = 970;
  var WINDOW_HEIGHT = 720;

  const PERMITIVITY     = 9 * Math.pow(10, 9);
  const ELECTRON_CHARGE = -1.602 * Math.pow(10, -19);
  const PROTON_CHARGE   = -ELECTRON_CHARGE;
  const PROTON_MASS     = 1.6727 * Math.pow(10, -27);
  const NEUTRON_MASS    = 1.6750 * Math.pow(10, -27);
  const ELECTRON_MASS   =  9.110 * Math.pow(10, -31);
  const VECTOR_WIDTH = 2;
#+END_SRC

** =Globals=
#+BEGIN_SRC javascript
  var PIXELS_PER_METER = 100;
  var simulation = undefined;
  var app = undefined;
#+END_SRC

** =class Particle=
#+BEGIN_SRC javascript
  class Particle {
      // x, y, radius
      constructor(args) {
          _.assign(this, _.defaults(args, {
              x: 0,
              y: 0,
              radius: 8,
              velocityX: 0,            // m/s
              velocityY: 0,            // m/s
              accelX: 0,               // m/s
              accelY: 0,               // m/s
              charge: ELECTRON_CHARGE, // C
              mass: ELECTRON_MASS      // kg
          }));
          this.forceX = 0;
          this.forceY = 0;
          this.potentialEnergy = 0;
      }

      draw() {
          this.forceVector = new Path.Line(new Point(this.x, this.y), new Point(this.x, this.y));
          this.forceVector.strokeWidth = VECTOR_WIDTH;
          this.forceVector.strokeColor = 'rgba(255, 255, 255, 0.5)';
          this.accelVector = new Path.Line(new Point(this.x, this.y), new Point(this.x, this.y));
          this.accelVector.strokeWidth = VECTOR_WIDTH;
          this.accelVector.strokeColor = 'rgba(255, 0, 0, 0.5)';
          this.velocityVector = new Path.Line(new Point(this.x, this.y), new Point(this.x, this.y));
          this.velocityVector.strokeWidth = VECTOR_WIDTH;
          this.velocityVector.strokeColor = 'rgba(0, 255, 0, 0.5)';
          this.circle = new Path.Circle(new Point(this.x * PIXELS_PER_METER + WINDOW_WIDTH/2, -this.y * PIXELS_PER_METER + WINDOW_HEIGHT/2), this.radius);
          this.label = new PointText(this.x * PIXELS_PER_METER + WINDOW_WIDTH/2 - 2, -this.y * PIXELS_PER_METER + WINDOW_HEIGHT/2 + 2);
          this.label.strokeColor = 'white';
          this.label.content = this.name;
          this.label.fontSize = 8;
          this.circle.onMouseDrag = this.label.onMouseDrag = _.bind(function(event) {
              this.circle.translate(event.delta);
              this.label.translate(event.delta);
              this.x = (this.circle.position.x - WINDOW_WIDTH/2) / PIXELS_PER_METER;
              this.y = -(this.circle.position.y - WINDOW_HEIGHT/2) / PIXELS_PER_METER;
              this.drawAllVectors();
          }, this);
          this.setParticleColor();
      }

      drawVector(whichVector) {
          this[whichVector + 'Vector'].segments = [this.getPosition(), this.getOffsetByMeters(new Point(this[whichVector + 'X'] * PIXELS_PER_METER, -this[whichVector + 'Y'] * PIXELS_PER_METER))];
      }

      drawAllVectors() {
          _.forEach(['force', 'velocity', 'accel'], _.bind(function(whichVector) {
              this.drawVector(whichVector);
          }, this));
      }

      reactToElectricFieldDueTo(otherParticleList) {
          this.forceX = this.forceY = this.accelX = this.accelY = this.potentialEnergy = 0;

          _.forEach(otherParticleList, _.bind(function(otherParticle) {
              const distanceX = (this.x - otherParticle.x);
              const distanceY = (this.y - otherParticle.y);
              if((distanceX == 0 && distanceY == 0) || this === otherParticle) {
                  return;
              }
              const qq = (this.charge * otherParticle.charge);
              const auxiliarForce = PERMITIVITY * ( ( qq ) / Math.pow(( distanceX * distanceX + distanceY * distanceY), 3/2) );
              this.potentialEnergy += auxiliarForce * ( distanceX * distanceX + distanceY * distanceY);
              this.forceX += distanceX * auxiliarForce;
              this.forceY += distanceY * auxiliarForce;
          }, this));
          this.accelX = this.forceX / this.mass;
          this.accelY = this.forceY / this.mass;
      }

      advanceTime(milliseconds) {
          const seconds = milliseconds / 1000;
          this.velocityX += this.accelX * seconds;
          this.velocityY += this.accelY * seconds;
          this.x += this.velocityX * seconds;
          this.y += this.velocityY * seconds;
          var translatePoint = new Point(this.velocityX * seconds * PIXELS_PER_METER, -1 * this.velocityY * seconds * PIXELS_PER_METER);
          this.circle.translate(translatePoint);
          this.label.translate(translatePoint);
          this.drawAllVectors();
      }

      setParticleColor() {
          if (this.charge > 0) {
              this.circle.fillColor = 'red';
          } else if (this.charge < 0) {
              this.circle.fillColor = 'blue';
          }
      }

      getPosition() {
          return new Point(this.circle.position.x, this.circle.position.y);
      }

      getOffset(offsetPoint) {
          return this.getPosition().add(offsetPoint);
      }

      getOffsetByMeters(offsetPointMeters) {
          return this.getOffset(offsetPointMeters.multiply(PIXELS_PER_METER));
      }

  }
#+END_SRC

** =class ChargeSystem=
#+BEGIN_SRC javascript
  class ChargeSystem {
      constructor() {
          this.initialize();
          this.running = false;
      }

      initialize() {
          paper.project.activeLayer.removeChildren();
          this.particles = [];
          this.frameMillis = 1000/60;
          this.secondsElapsed = 0;

          this.secondsLabel = new PointText(20, 20);
          this.secondsLabel.fontSize = 16;
          this.formatSecondsLabel();
      }

      start() {
          this.refreshIntervalId = setInterval(_.bind(function() {
              this.advance();
              this.formatSecondsLabel();
              this.secondsElapsed += this.frameMillis / 1000;
          }, this), 1000/60/*this.frameMillis*/);
          this.disableInputs();
          this.running = true;
          this.renameStartStopButton();
      }

      stop() {
          clearInterval(this.refreshIntervalId);
          this.running = false;
          this.renameStartStopButton();
      }

      reset() {
          PIXELS_PER_METER = 100;
          app.$set(app, 'pixelsPerMeter', 100);
          this.secondsElapsed = 0;
          clearInterval(this.refreshIntervalId);
          this.refreshIntervalId = undefined;
          this.initialize();
          this.running = false;
          this.enableInputs();
          this.renameStartStopButton();
      }

      toggleStatus() {
          if (!this.running) {
              this.start();
          } else {
              this.stop();
          }
      }

      disableInputs() {
          $('input').attr('disabled', 'disabled');
      }

      enableInputs() {
          $('input').attr('disabled', null);
      }

      renameStartStopButton() {
          if (this.running) {
              $('#start-stop-btn').text('Stop');
          } else {
              $('#start-stop-btn').text('Start');
          }
      }

      formatSecondsLabel() {
          this.secondsLabel.content = "t = " + this.secondsElapsed + "s";
      }

      fixParticles(){
          _.forEach(this.particles, _.bind(function(particle) {
              particle.x = (particle.circle.position.x - WINDOW_WIDTH/2) / PIXELS_PER_METER;
              particle.y = -(particle.circle.position.y - WINDOW_HEIGHT/2) / PIXELS_PER_METER;
          }, this));
      }
  }
#+END_SRC

** =class TwoChargeSystem=
#+BEGIN_SRC javascript
  class TwoPointChargeSystem extends ChargeSystem {
      initialize() {
          super.initialize();
          this.p0 = new Particle({
              x: 3,
              velocityX: 0,
              velocityY: -5,
              charge: ELECTRON_CHARGE,
              mass: ELECTRON_MASS,
              name: '0'
          });
          this.particles.push(this.p0);
          this.p0.draw();

          this.p1 = new Particle({
              x: 0,
              velocityX: 0,
              velocityY: 0,
              charge: PROTON_CHARGE,
              mass: PROTON_MASS,
              name: '1'
          });
          this.particles.push(this.p1);
          this.p1.draw();
      }

      advance() {
          _.forEach(this.particles, _.bind(function(particle) {
              particle.reactToElectricFieldDueTo(this.particles);
          }, this));
          _.forEach(this.particles, _.bind(function(particle) {
              particle.advanceTime(this.frameMillis);
          }, this));
      }
  }
#+END_SRC

** =class ElectricDipole=
#+BEGIN_SRC javascript
  class ElectricDipoleSystem extends ChargeSystem {
      initialize() {
          // p1 and p1 are the "fixed" ones
          super.initialize();
          this.p0 = new Particle({
              x: 2,
              y: 0,
              charge: ELECTRON_CHARGE,
              mass: ELECTRON_MASS,
              name: '0'
          });
          this.particles.push(this.p0);
          this.p0.draw();

          this.p1 = new Particle({
              y: -1,
              charge: ELECTRON_CHARGE,
              mass: ELECTRON_MASS,
              name: '1'
          });
          this.particles.push(this.p1);
          this.p1.draw();

          this.p2 = new Particle({
              y: 1,
              charge: this.p1.charge,
              mass: this.p1.mass,
              name: '2'
          });
          this.particles.push(this.p2);
          this.p2.draw();
      }

      advance() {
          this.p0.reactToElectricFieldDueTo(this.particles);
          this.p0.advanceTime(this.frameMillis);
      }
  }
#+END_SRC

** =class ThreeChargeSystem=
#+BEGIN_SRC javascript
  class ThreePointChargeSystem extends ChargeSystem {
      initialize() {
          super.initialize();
          this.p0 = new Particle({
              x: 3,
              velocityX: 0,
              velocityY: 5,
              charge: ELECTRON_CHARGE,
              mass: ELECTRON_MASS,
              name: '0'
          });
          this.particles.push(this.p0);
          this.p0.draw();

          this.p1 = new Particle({
              x: 0,
              velocityX: 0,
              velocityY: 0,
              charge: PROTON_CHARGE,
              mass: PROTON_MASS,
              name: '1'
          });
          this.particles.push(this.p1);
          this.p1.draw();

          this.p2 = new Particle({
              x: -3,
              velocityX: 0,
              velocityY: -5,
              charge: ELECTRON_CHARGE,
              mass: ELECTRON_MASS,
              name: '2'
          });
          this.particles.push(this.p2);
          this.p2.draw();

          _.forEach(this.particles, _.bind(function(particle) {
              particle.reactToElectricFieldDueTo(this.particles);
          }, this));
      }

      advance() {
          _.forEach(this.particles, _.bind(function(particle) {
              particle.reactToElectricFieldDueTo(this.particles);
          }, this));
          _.forEach(this.particles, _.bind(function(particle) {
              particle.advanceTime(this.frameMillis);
          }, this));
      }
  }
#+END_SRC
** =onload script=
#+BEGIN_SRC java
  window.onload = function() {
      $('#canvas').width($('#canvas-container').width());

      WINDOW_WIDTH  = $('#canvas-container').width();
      WINDOW_HEIGHT = $('#canvas-container').height();

      paper.setup('canvas');

      simulation = new TwoPointChargeSystem();

      app = new Vue({
          el: '#app',
          data: {
              pixelsPerMeter: PIXELS_PER_METER,
              updatePixelsPerMeter: function(event) {
                  var newValue = $('input.ppm').val();
                  PIXELS_PER_METER = newValue;
                  app.pixelsPerMeter = newValue;
                  simulation.fixParticles();
              },
              simulation: simulation,
              changeChargeSystem: function() {
                  var selectedSystem = $('#charge-system-selector').val();
                  simulation.reset();
                  app.simulation = simulation = new SYSTEMS_MAP[selectedSystem]();
              }
          },
          components: {
              "particle-controls": {
                  props: ['index', 'particle'],
                  data: function() {
                      return {
                          showing: true
                      };
                  },
                  template: `
  <div class="panel panel-warning">
      <div class="panel-heading unselectable" v-on:click="showing = !showing">
          <span>Particle {{ index }}</span>
          <span class="glyphicon glyphicon-chevron-down pull-right" v-show="!showing"></span>
          <span class="glyphicon glyphicon-chevron-up pull-right" v-show="showing"></span>
      </div>
      <div class="panel-body" v-show="showing">
          <div class="form-group">
              <div class="input-group">
                  <span class="input-group-addon">q =</span>
                  <input class="form-control" type="number" v-model="particle.charge" v-on:change="particle.setParticleColor()"/>
                  <span class="input-group-addon">C</span>
              </div>
          </div>
          <div class="form-group">
              <div class="input-group">
                  <span class="input-group-addon">m =</span>
                  <input class="form-control" type="number" v-model="particle.mass"/>
                  <span class="input-group-addon">kg</span>
              </div>
          </div>
          <div class="form-group">
              <div class="input-group">
                  <span class="input-group-addon">vx =</span>
                  <input class="form-control" type="number" v-model="particle.velocityX"/>
                  <span class="input-group-addon">m/s</span>
              </div>
          </div>
          <div class="form-group">
              <div class="input-group">
                  <span class="input-group-addon">ax =</span>
                  <input class="form-control" type="number" v-model="particle.accelX"/>
                  <span class="input-group-addon">m/s^2</span>
              </div>
          </div>
          <div class="form-group">
              <div class="input-group">
                  <span class="input-group-addon">vy =</span>
                  <input class="form-control" type="number" v-model="particle.velocityY"/>
                  <span class="input-group-addon">m/s</span>
              </div>
          </div>
          <div class="form-group">
              <div class="input-group">
                  <span class="input-group-addon">ay =</span>
                  <input class="form-control" type="number" v-model="particle.accelY"/>
                  <span class="input-group-addon">m/s^2</span>
              </div>
          </div>
      </div>
  </div>
  `
              }
          }
      });
  }
#+END_SRC
* Capturas de pantalla del programa en funcionamiento
#+BEGIN_LaTeX
\includegraphics[width=\linewidth]{sc1.png}
\includegraphics[width=\linewidth]{sc2.png}
\includegraphics[width=\linewidth]{sc3.png}
#+END_LaTeX
